{
	"info": {
		"_postman_id": "polri-backend-api-collection",
		"name": "POLRI Backend API",
		"description": "Collection lengkap untuk API POLRI Backend - Dashboard Monitoring System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "polri-backend"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "POST Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
                                    "const res = pm.response.json();",
                                    "const token = res && res.data && res.data.token;",
                                    "if (token) {",
                                    "  pm.environment.set('token', token);",
									"}",
                                    "pm.test(\"Token exists\", function () {",
                                    "  pm.expect(token).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@polri.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": ["{{base_url}}"],
							"path": ["api", "login"]
						},
						"description": "Login untuk mendapatkan Bearer token. Token akan otomatis disimpan ke environment variable `token`."
					},
					"response": []
				},
				{
					"name": "GET Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
                                    "pm.test(\"Has user object\", function () {",
                                    "  const res = pm.response.json();",
                                    "  pm.expect(res).to.have.property('data');",
                                    "  pm.expect(res.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/me",
							"host": ["{{base_url}}"],
							"path": ["api", "me"]
						},
						"description": "Mendapatkan user saat ini (protected)"
					},
					"response": []
				},
				{
					"name": "POST Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "logout"]
						},
						"description": "Logout dan revoke token (protected)"
					},
					"response": []
				}
			],
			"description": "Endpoint authentication (Sanctum)"
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "POST Webhook - Success Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('status');",
									"  pm.expect(response).to.have.property('message');",
									"  pm.expect(response).to.have.property('data');",
									"  pm.expect(response.status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Data contains required fields\", function () {",
									"  const response = pm.response.json();",
									"  const data = response.data;",
									"  pm.expect(data).to.have.property('username');",
									"  pm.expect(data).to.have.property('success');",
									"  pm.expect(data).to.have.property('ip_address');",
									"  pm.expect(data).to.have.property('raw_payload');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"john.doe\",\n  \"success\": true,\n  \"ip_address\": \"192.168.1.100\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook"]
						},
						"description": "Mengirim data login berhasil ke webhook endpoint"
					},
					"response": []
				},
				{
					"name": "POST Webhook - Failed Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success field is false\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response.data.success).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"john.doe\",\n  \"success\": false,\n  \"ip_address\": \"192.168.1.100\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook"]
						},
						"description": "Mengirim data login gagal ke webhook endpoint"
					},
					"response": []
				},
				{
					"name": "POST Webhook - Minimal Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jane.smith\",\n  \"success\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook"]
						},
						"description": "Mengirim data minimal (hanya username dan success)"
					},
					"response": []
				},
				{
					"name": "POST Webhook - Validation Error (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"  pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error response structure\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('status');",
									"  pm.expect(response).to.have.property('message');",
									"  pm.expect(response).to.have.property('errors');",
									"  pm.expect(response.status).to.eql('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": { "mode": "raw", "raw": "{}" },
						"url": {
							"raw": "{{base_url}}/api/webhook",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook"]
						},
						"description": "Test validasi dengan data kosong"
					},
					"response": []
				},
				{
					"name": "POST Webhook - Validation Error (Wrong Type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"  pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": { "mode": "raw", "raw": "{\n  \"username\": 123,\n  \"success\": \"true\"\n}" },
						"url": {
							"raw": "{{base_url}}/api/webhook",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook"]
						},
						"description": "Test validasi dengan tipe data yang salah"
					},
					"response": []
				}
			],
			"description": "Endpoint untuk menerima data login dari sistem RADIUS"
		},
		{
			"name": "PrivacyIDEA Webhook",
			"item": [
				{
					"name": "POST PrivacyIDEA Webhook - Success Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('status');",
									"  pm.expect(response).to.have.property('message');",
									"  pm.expect(response).to.have.property('data');",
									"  pm.expect(response.status).to.eql('success');",
									"});",
									"",
									"pm.test(\"Data contains PrivacyIDEA fields\", function () {",
									"  const response = pm.response.json();",
									"  const data = response.data;",
									"  pm.expect(data).to.have.property('username');",
									"  pm.expect(data).to.have.property('success');",
									"  pm.expect(data).to.have.property('realm');",
									"  pm.expect(data).to.have.property('token_type');",
									"  pm.expect(data).to.have.property('action');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"john.doe\",\n  \"success\": true,\n  \"client_ip\": \"192.168.1.100\",\n  \"realm\": \"polri.local\",\n  \"resolver\": \"useridresolver\",\n  \"token_type\": \"totp\",\n  \"serial\": \"PI123456789\",\n  \"action\": \"authenticate\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook/privacyidea",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook", "privacyidea"]
						},
						"description": "Mengirim data login berhasil dari PrivacyIDEA dengan field lengkap"
					},
					"response": []
				},
				{
					"name": "POST PrivacyIDEA Webhook - Failed Login",
					"event": [
						{
							"listen": "test",
							"script": [
								"pm.test(\"Status code is 201\", function () {",
								"  pm.response.to.have.status(201);",
								"});",
								"",
								"pm.test(\"Success field is false\", function () {",
								"  const response = pm.response.json();",
								"  pm.expect(response.data.success).to.eql(false);",
								"});"
							],
							"type": "text/javascript"
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"john.doe\",\n  \"success\": false,\n  \"client_ip\": \"192.168.1.100\",\n  \"realm\": \"polri.local\",\n  \"token_type\": \"totp\",\n  \"action\": \"authenticate\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook/privacyidea",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook", "privacyidea"]
						},
						"description": "Mengirim data login gagal dari PrivacyIDEA"
					},
					"response": []
				},
				{
					"name": "POST PrivacyIDEA Webhook - Minimal Data",
					"event": [
						{
							"listen": "test",
							"script": [
								"pm.test(\"Status code is 201\", function () {",
								"  pm.response.to.have.status(201);",
								"});"
							],
							"type": "text/javascript"
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{ "key": "Content-Type", "value": "application/json" }
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jane.smith\",\n  \"success\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/webhook/privacyidea",
							"host": ["{{base_url}}"],
							"path": ["api", "webhook", "privacyidea"]
						},
						"description": "Mengirim data minimal dari PrivacyIDEA (hanya username dan success)"
					},
					"response": []
				}
			],
			"description": "Endpoint khusus untuk menerima data login dari PrivacyIDEA v3.11.4"
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "GET Active Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has active_users field\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('active_users');",
									"  pm.expect(response.active_users).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/active-users",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "active-users"]
						},
						"description": "Mendapatkan daftar pengguna aktif (login dalam 15 menit terakhir)"
					},
					"response": []
				},
				{
					"name": "GET Unique Users Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has unique_users field\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('unique_users');",
									"  pm.expect(response.unique_users).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/unique-users",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "unique-users"]
						},
						"description": "Mendapatkan jumlah pengguna unik yang pernah login"
					},
					"response": []
				},
				{
					"name": "GET List Unique Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/list-unique-users",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "list-unique-users"]
						},
						"description": "Mendapatkan daftar lengkap pengguna unik"
					},
					"response": []
				},
				{
					"name": "GET Last Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/last-login",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "last-login"]
						},
						"description": "Mendapatkan data login terakhir untuk setiap pengguna"
					},
					"response": []
				},
				{
					"name": "GET Success Logins Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success_logins field\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('success_logins');",
									"  pm.expect(response.success_logins).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/success-logins",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "success-logins"]
						},
						"description": "Mendapatkan jumlah login berhasil"
					},
					"response": []
				},
				{
					"name": "GET Failed Logins Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has failed_logins field\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('failed_logins');",
									"  pm.expect(response.failed_logins).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/failed-logins",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "failed-logins"]
						},
						"description": "Mendapatkan jumlah login gagal"
					},
					"response": []
				},
				{
					"name": "GET Logins by Date - Valid Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/logins-by-date?from=2024-01-01&to=2024-01-31",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "logins-by-date"],
							"query": [
								{ "key": "from", "value": "2024-01-01" },
								{ "key": "to", "value": "2024-01-31" }
							]
						},
						"description": "Mendapatkan statistik login berdasarkan rentang tanggal"
					},
					"response": []
				},
				{
					"name": "GET Logins by Date - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"  pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error response structure\", function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('error');",
									"  pm.expect(response).to.have.property('errors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{ "key": "Authorization", "value": "Bearer {{token}}" }
						],
						"url": {
							"raw": "{{base_url}}/api/stats/logins-by-date",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "logins-by-date"]
						},
						"description": "Test validasi tanpa parameter tanggal"
					},
					"response": []
				}
			],
			"description": "Endpoint untuk mendapatkan berbagai statistik login (protected)"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "GET Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/up",
							"host": ["{{base_url}}"],
							"path": ["up"]
						},
						"description": "Health check endpoint untuk memastikan aplikasi berjalan"
					},
					"response": []
				}
			],
			"description": "Endpoint untuk monitoring kesehatan aplikasi"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": { "type": "text/javascript", "exec": [""] }
		},
		{
			"listen": "test",
			"script": { "type": "text/javascript", "exec": [""] }
		}
	],
	"variable": [
		{ "key": "base_url", "value": "http://localhost:8000", "type": "string" }
	]
}
